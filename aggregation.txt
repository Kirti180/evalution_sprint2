1. Create two collections, "vendors" and "sales".
==> db.sales.insertMany([{ "_id": 1, "user_id": 1, "item": "books", "selling_price": 100, "profit": 8 }, { "_id": 2, "user_id": 1, "item": "pens", "selling_price": 50, "profit": 5 }, { "_id": 3, "user_id": 2, "item": "books", "selling_price": 150, "profit": 12 }, { "_id": 4, "user_id": 2, "item": "pens", "selling_price": 60, "profit": 6 }, { "_id": 5, "user_id": 3, "item": "books", "selling_price": 200, "profit": 16 }, { "_id": 6, "user_id": 3, "item": "pens", "selling_price": 70, "profit": 7 }])
==>db.Vendors.insertMany([{ "_id": 1, "name": "Azim", "age": 25, "city": "Bangalore" }, { "_id": 2, "name": "Mukesh", "age": 30, "city": "Mumbai" }, { "_id": 3, "name": "Gautam", "age": 35, "city": "Pune" }])

2. Create an index on the user_id field in the sales collection to improve the performance of your queries.
==>db.sales.createIndex({user_id:1})

3. Use the $lookup operator in an aggregation pipeline to join the vendors and sales collections, and return a new documents that contains the name and city of each vendor, along with their sales.
==>db.Vendors.aggregate([{$lookup:{from:"sales",localField:"_id",foreignField:"user_id",as:"sales"}},
{$project:{name:1,city:1,_id:1,item:1,profit:1,sales:1}}])

4. Use the $group operator in an aggregation pipeline to calculate the total number of sales and total profit for each user. The output should look like this
==> db.Vendors.aggregate([{$lookup:{from:"sales",localField:"_id",foreignField:"user_id",as:"sales"}},
{$project:{name:1,city:1,_id:1,item:1,profit:1,sales:1}},{$group:{_id:{name:"$name",total_sale:{$size:"$sales"}
,total_profit:{$sum:"$sales.profit"}}}}])

5. Use the $sort operator to sort the output documents by total profit in decreasing order. The output should look like this:
==>  db.Vendors.aggregate([{$lookup:{from:"sales",localField:"_id",foreignField:"user_id",as:"sales"}},
{$project:{name:1,city:1,_id:1,item:1,profit:1,sales:1}},{$group:{_id:{name:"$name",total_sale:{$size:"$sales"}
,total_profit:{$sum:"$sales.profit"}}}},{$sort:{total_profit:-1}}])

6. Cross check the total_sales and total_profit, if it is correct, by adding more sales in the sales collection and running your aggregation pipeline again.
==> db.Vendors.aggregate([{$lookup:{from:"sales",localField:"_id",foreignField:"user_id",as:"sales"}},
{$project:{name:1,city:1,_id:1,item:1,profit:1,sales:1}},{$group:{_id:{name:"$name",total_sale:{$size:"$sales"},total_profit:{$sum:"$sales.profit"}}}},{$sort:{total_profit:-1}}])